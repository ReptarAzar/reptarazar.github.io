---
layout: post
title:  "IFTTT"
date:   2015-01-09 00:00:00
permalink: ifttt
categories:
---


<!-- Begin Hero Row -->
<div class="hero row ifttt-hero">
    <div class="one-heroic-headline"><span class="character-1">I</span><span class="character-2">F</span><span class="character-3">T</span><span class="character-4">T</span>T</div>

    <img src="../assets/img/portfolio/ifttt/erlenmeyer-flask.png" class="erlenmeyer-flask" />

</div>

<!-- Begin Title Row -->
<div class="row title">
    <div class="label-column">
        <div>Project Name</div>
    </div>

    <div class="content-column">
        <span class="title">IFTTT UX Experiment</a></span>
    </div>
</div>

<!-- Begin Role Row -->
<div class="row role">
    <div class="label-column">
        <div>Role</div>
    </div>

    <div class="content-column">
        <span class="role">Outside Tinkerer</span>
    </div>
</div>

<!-- Begin Intro Row -->
<div class="row problem">
    <div class="label-column">
        Intro
    </div>

    <div class="content-column">
        DISCLAIMER: Unlike all the other projects in this portfolio, this one is not for realsies. It's an experiment and a proof of concept and that's it.

        <p>While I would really like to, I do not work at IFTTT at this time. </p>

        <p>BUT, I wanted to experiment, not with the recipes, but how we (users) interact with the APIs. In my head, the UX of a scanning a grid of logos felt a bit weighty and cumbersome compared to typing recipes out. So, what would a command line or Slack interface look like for IFTTT? Could one co-mingle speed and simplicity of the command line with the and ease of using IFTTT and all it's wonderful magic?</p>

        <p>Enough intro, lets get into it.</p>

    </div>
</div>


<!-- Begin Problem Row -->
<div class="row problem">
    <div class="label-column">
        Problem
    </div>

    <div class="content-column">
        User: IFTTT rules, but making a recipe is slower than it could be and confined to the web/native apps.
        </div>
</div>

<!-- Begin Research Row -->
<div class="row research">
    <div class="label-column">
        Research
    </div>

    <div class="content-column">

        So I put my intuition about lists being easier to scan than grids to the test. What I found was compelling answer to the contrary. Aka, I was wrong. Grids are faster than lists for finding objects. Here's why: Humans can use parallelized peripheral scanning when identifying objects and take shortcuts as opposed to scanning a list of text in a serialized manner.

    <blockquote>
        "Most people's names have less than 3 words, which means the eye can scan each name with a single fixation - this is good for visual searching. However, text is read using eye fixations in a serial manner; this means that in order to read a shopping list (or a list of contacts), each item has to be scanned - one at a time (this is true if you actually reading it; for visual search the brain takes shortcuts, but it's a process that with words still involves more fixations)."

        With a group of images, a single fixation could suffice as in addition to the point of fixation the brain also processes in parallel the peripheral view.

        <p>— Izhaki, <a href="http://ux.stackexchange.com/questions/71767/which-gives-heavier-congitive-load-in-grid-on-phone-screen-grid-of-images-or-gr">ux.stackexchange</a></p>
    </blockquote>

        <p>Images are easier to scan because of parallelized processing. And we developed this skill early on, before we developed language.</p>

        <p>But I still thought I could make a faster experience for people who knew what they wanted and wanted to type it quickly. This use case fits Chris Becker, an infrastructure and devops engineer, perfectly.</p>

        <blockquote>
            "Oh wow! I really like this. I can see this totally useful for our ops chat for doing some basic dumb monitoring of the status of services."

            <p>– Chris Becker, Warby Parker</p>
        </blockquote>

        <p>So with at least one potential user, I set out to draw it up.</p>
    </div>
</div>


<!-- Begin Sketches Row -->
<div class="row sketches">
    <div class="label-column">
        UXD/Wireframes
    </div>

    <div class="content-column">
        <a href="../assets/img/portfolio/ifttt/ifttt-plus-slack.png" data-lightbox="sketches" class="lightbox-image">
            <img src="../assets/img/portfolio/ifttt/ifttt-plus-slack.png" />
        </a>

        <p>I wanted it to be as self-contained, simple as possible without losing any of the functionality that IFTTT provides. There were challenges like: what should be the order of the search autocomplete? where should the helper text live? and what if the user hasn't connected one of the accounts in the list? </p>

        <p>I solved each of those by trying a few different things before setting on this final set of wireframes.</p>


    </div>
</div>

<!-- Begin Prototype Row -->
<div class="row prototype">
    <div class="label-column">
        Prototype
    </div>

    <div class="content-column">
        [Code Pen]

        :focus => dropdown

        It's a sweet (but lean) proof of concept.

        Type in "Instagram" and see what happens.

    </div>
</div>

<!-- Begin Live Row -->
<div class="row live">
    <div class="label-column">
        Conclusions
    </div>

    <div class="content-column">
        Pros: Loads of potential for fast, integrable experience for IFTTT.

        <p>Cons: Currently robotic as hell and would need a strong suggestion engine built (like <a href="https://github.com/twitter/typeahead.js/blob/master/doc/bloodhound.md">bloodhound.js</a>) to pull off the recommendations and auto completing. </p>

    </div>
</div>

<!-- Begin Next Row -->
<div class="row next">

    <h2>what to check out next...</h2>

    <div class="next-column post-list">
        <div class="post-thumb trove-conversations-thumb"><a class="post-link trove" href="/conversations">Conversations</a></div>
    </div>

    <div class="next-column post-list">
        <a href="http://onemorelevel.com/static/games/miniputt.swf" class="post-thumb miniputt-thumb">
            <span class="post-link miniputt">MiniPutt<span class="subheading">(flash game)</span>
        </a>
    </div>
</div>


